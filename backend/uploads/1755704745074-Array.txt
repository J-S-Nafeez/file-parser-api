DAY-1)

Problem-1)
longest Element in array
class Solution {
    public static int largest(int[] arr) {
        int n= arr.length;
        int largest=arr[0];
        for(int i=0;i<n;i++)
        {
            if(arr[i]>largest)
            {
                largest=arr[i];
            }
        }
        return largest;
    }
}
***********************

Problem 2)
Second Largest Element
class Solution {
    public static int largest(int[] arr) {
	int temp;
	for(int i=0;i<arr.length;i++)
	{
		for(int j=i+1;j<arr.length;j++)
	{
		if(arr[i]<arr[j])
		//if(arr[i]>arr[j])  for smallest element logic 
	{
		int temp=arr[i];
		int arr[j]=arr[i];
		int arr[i]=temp;
	}
	}
	}
		System.out.println("Second largest element"+arr[1]);
		System.out.println("Second smallest element"+arr[1]);
}
 public static void main(String[] args) {
        int[] arr = {10, 5, 20, 8, 12};
        secondLargestAndSmallest(arr);
    }
}


				***********OR*************





class Solution {
    public static void secondLargestAndSmallest(int[] arr) {
        int temp;

        for (int i = 0; i < arr.length; i++) {
            for (int j = i + 1; j < arr.length; j++) {
                if (arr[i] < arr[j]) {  // For descending order
                    temp = arr[i];
                    arr[i] = arr[j];
                    arr[j] = temp;
                }
            }
        }

        System.out.println("Second largest element: " + arr[1]);

        // If you want second smallest, sort in ascending or use:
        System.out.println("Second smallest element: " + arr[arr.length - 2]);
    }

    public static void main(String[] args) {
        int[] arr = {10, 5, 20, 8, 12};
        secondLargestAndSmallest(arr);
    }
}


******************

Problem3)
Check the Arrya is Sorted or not 
public class Solution {
    public static boolean isSorted(int arr[]) {
        for (int i = 0; i < arr.length - 1; i++) {
            if (arr[i] > arr[i + 1]) {
                return false; // If current element is greater than next, not sorted
            }
        }
        return true; // If loop completes, array is sorted
    }

    public static void main(String[] args) {
        int[] arr = {1, 2, 3, 4, 5}; // Change this array to test
        if (isSorted(arr)) {
            System.out.println("Array is sorted in ascending order.");
        } else {
            System.out.println("Array is not sorted.");
        }
    }
}
**************

Problem 4)
Left Rotate By One 

class Solution {
    public void rotate(int[] nums, int k) {
        int n = nums.length;
        int temp = nums[0]; // Store first element

        // Shift elements to the left
        for (int i = 1; i < n; i++) {
            nums[i - 1] = nums[i];
        }

        // Place first element at the end
        nums[n - 1] = temp;
    }
}


EG:
Input: nums = [1, 2, 3, 4, 5]

Output: [2, 3, 4, 5, 1]

Explanation: Initially, nums = [1, 2, 3, 4, 5]

Rotating once to left -> nums = [2, 3, 4, 5, 1]


***********************************

class Solution {
    public void rotate(int[] arr) {
        // code here
        int n=arr.length;
        int temp=arr[n-1];
        for(int i=n-1;i>0;i--)
        {
            arr[i]=arr[i-1];
        }
        arr[0]=temp;
        // arr[n]=temp;
    }
}

EG:
Input: arr[] = [1, 2, 3, 4, 5]
Output: [5, 1, 2, 3, 4]
Explanation: If we rotate arr by one position in clockwise 5 come to the front and remaining those are shifted to the end.

******************************************



									****DAY -2****





Problem-5)
Left Rotate by D palces 
class Solution {
    public void rotate(int[] nums, int k) {
        int n = nums.length;
        int d = k % n;

        int[] temp = new int[d];
        for(int i = 0; i < d; i++) {
            temp[i] = nums[n - d + i];
        }
        
        for(int i = n - 1; i >= d; i--) {
            nums[i] = nums[i - d];
        }
        
        for(int i = 0; i < d; i++) {
            nums[i] = temp[i];
        }
    }
}


Problem 6)
Linear Search 

public static int LinearSearch(int nums[],int target)
{
for(int i=0;i<nums.length;i++)
{
if(nums[i]==target)
{
return i;
}
}
return -1;
}


Problem 7)
Revese an Array

class Solution {
    public void reverseArray(int[] arr) {
        int j = arr.length - 1;
        int i = 0;
        while (i < j) {
            int t = arr[i];
            arr[i] = arr[j];
            arr[j] = t;
            i++;
            j--;
        }
        
        // Printing the whole array after reversal
        for (int k : arr) {
            System.out.print(k + " ");
        }
    }
}

					*****OR*********


//Easy
class Solution {
    public int linearSearch(int nums[], int target) {
		//Your code goes here
        for(int i=0;i<nums.length;i++)
        {
            if(nums[i]==target)
            {
                return i;
            }
        }
        return -1;
    }
}

*******************************************

Problem 8)
Missing Number 

class Solution {
    public int missingNumber(int[] nums) {
        int n=nums.length;
        int sum=0;
        int NSum=(n*(n+1)/2);
        for(int i=0;i<n;i++)
        {
            sum+=nums[i];
        }
        int Mis=NSum-sum;
        return Mis;
    }
}


****************************************************


Problem 9)
Union Of Two Sorted Array 

public static void Union(int[] a, int[] b) {
    int n = a.length;
    int m = b.length;
    HashSet<Integer> set = new HashSet<>();
  
    for (int i = 0; i < n; i++) {
        set.add(a[i]);
    }
    for (int i = 0; i < m; i++) {
        set.add(b[i]);
    }
  
    for (int k : set) {
        System.out.print(k + " ");
    }
    System.out.println();
}

public static void main(String[] args) {
    int[] a = {1, 2, 3, 4, 5};

    int[] b = {3, 4, 5, 6, 7};

    Union(a, b);
}

			******************OR*******************
class Solution {
    public int[] unionArray(int[] nums1, int[] nums2) {
        int n = nums1.length;
        int m = nums2.length; 
        HashSet<Integer> set = new HashSet<>();
        
        for(int i = 0; i < n; i++) {
            set.add(nums1[i]);
        }
        for(int i = 0; i < m; i++) {
            set.add(nums2[i]);
        }
        
        List<Integer> list = new ArrayList<>(set);
        Collections.sort(list);
        
        int[] result = new int[list.size()];
        for(int i = 0; i < list.size(); i++) {
            result[i] = list.get(i);
        }
        
        return result;
    }
}


             								*********DAY 3)**********

Problem 10)
Intesection of two Arrays

import java.util.*;
  
class Solution {
    public int[] intersection(int[] nums1, int[] nums2) {
        List<Integer> result = new ArrayList<>();
        int i = 0, j = 0;
        int n = nums1.length;
        int m = nums2.length;

        // Sort first if not already sorted
        Arrays.sort(nums1);
        Arrays.sort(nums2);

        while (i < n && j < m) {
            if (nums1[i] < nums2[j]) {
                i++;
            } else if (nums1[i] > nums2[j]) {
                j++;
            } else {
                if (result.isEmpty() ||
                    result.get(result.size() - 1) != nums1[i]) {
                    result.add(nums1[i]);
                }
                i++;
                j++;
            }
        }
  
        int[] ans = new int[result.size()];
        for (int k = 0; k < result.size(); k++) {
            ans[k] = result.get(k);
        }
  
        return ans;
    }
}

public class Main {
    public static void main(String[] args) {
        Solution solution = new Solution();

        // Example 1:
        int[] nums1 = {1, 2, 2, 1}, nums2 = {2, 2};

        int[] result1 = solution.intersection(nums1, nums2);
        System.out.println(Arrays.toString(result1)); // Expected: [2]

        // Example 2:
        int[] nums3 = {4, 9, 5}, nums4 = {9, 4, 9, 8, 4};

        int[] result2 = solution.intersection(nums3, nums4);
        System.out.println(Arrays.toString(result2)); // Expected: [4,9] or [9,4]
    }
}

***********************************************
Problem 11)
find MaxConsecutiveOnes in the Array

class Solution {
    public int findMaxConsecutiveOnes(int[] nums) {
        
        int count=0;
        int mxcount=0;
        for(int i=0;i<nums.length;i++)
        {
            if(nums[i]==1)
            {
                count++;
                mxcount=Math.max(count,mxcount);
            }
            else
            {
                count=0;
            }
        }
        return mxcount;
    }

}

***************************************
Problem 12)
Find Number that Appears Once 
class Solution {
    public int singleNumber(int[] nums) {
        //your code goes here
        int value=0;
        for(int i=0;i<nums.length;i++)
        {
            value=value^nums[i];
        }
        return value;
    }
}

Problem 13)
Longest SubArray Sum Equal to K
class Solution {
    public int subarraySum(int[] nums, int k) {
        int n=nums.length;
        int count=0;
        for(int i=0;i<n;i++)
        {
            int sum=0;
            for(int j=i;j<n;j++)
            {
                sum+=nums[j];
               if(sum ==k) count ++;
            }
        }
        return count;        
    }
}
**************************************************
Problem 14)
Longest subarray with sum K (Positives + Negatives)
class Solution {
    public int subarraySum(int[] nums, int k) {
        int n = nums.length;
        int maxLength = 0;
        for(int i = 0; i < n; i++) {
            int sum = 0;
            for(int j = i; j < n; j++) {
                sum += nums[j];
                
                if(sum == k) {
                    int length = j - i + 1;
                    if (length > maxLength) {
                        maxLength = length;
                    }
                }
            }
        }
        return maxLength;
    }
}





										*************Day 4)************

Problem 15)
2 Sum Problem


class Solution {
    public int[] twoSum(int[] nums, int target) {
        HashMap<Integer, Integer> hm = new HashMap<>();
        
        for(int i = 0; i < nums.length; i++) {
            int com = target - nums[i];
            if(hm.containsKey(com)) {
                return new int[] { hm.get(com), i };
            }
            hm.put(nums[i], i);
        }
        
        return new int[] {};// if no match is found
    }
}


Problem 16)
Majority Element 

class Solution {
    public int majorityElement(int[] nums) {
        int count=0;
        int candat=0;
        for(int i=0;i<nums.length;i++)
        {
            if(count==0)
            {
                candat=nums[i];
            } 
    }
}1

Problem 17)

Sort 0's 1's 
class Solution {
    public static void sortZerosAndOnes(int[] arr) {
        int left = 0;
        int right = arr.length - 1;

        while (left < right) {
            while (arr[left] == 0 && left < right) {
                left++;
            }
            while (arr[right] == 1 && left < right) {
                right--;
            }
            if (left < right) {
                int temp = arr[left];
                arr[left] = arr[right];
                arr[right] = temp;

                left++;
                right--;
            }
        }
    }
  
    public static void main(String[] args) {
        int[] arr = { 1, 0, 1, 0, 1, 0 };
        sortZerosAndOnes(arr);
        for(int i : arr) {
            System.out.print(i + " ");
        }
    }
}



							***********DAY 5)**********************

Problem 18)
Seletion Sort 

public class SelectionSortExample {

    static void selectionSort(int[] arr) {
        int n = arr.length;

        for (int i = 0; i < n - 1; i++) {
            int minIdx = i;

            for (int j = i + 1; j < n; j++) {
                if (arr[j] < arr[minIdx]) {
                    minIdx = j;
                }
            }
            // Swap arr[minIdx] and arr[i]
            int temp = arr[minIdx];
            arr[minIdx] = arr[i];
            arr[i] = temp;
        }
    }
  
    public static void main(String[] args) {
        int[] arr = {64, 25, 12, 22, 11};

        System.out.println("Array before Selection Sort:");
        for(int i : arr) {
            System.out.print(i + " ");
        }
        System.out.println();

        selectionSort(arr);

        System.out.println("Array after Selection Sort:");
        for(int i : arr) {
            System.out.print(i + " ");
        }
    }
}

									********DAY 6)**************



Problem 19)
Non-Repeating Element
   


class Solution {
    public int firstNonRepeating(int[] arr) {
        int n = arr.length;
        for (int i = 0; i < n; i++) {
            boolean isRepeat = false;
            for (int j = 0; j < n; j++) {
                if (i != j && arr[i] == arr[j]) {
                    isRepeat = true;
                    break;
                }
            }
            if (!isRepeat) {
                return arr[i]; // first non-repeating element
            }
        }
        return 0; 
    }
}


					**********DAY 7)

Problem 20)

Prime number in given range


public class Solution {
    public static void main(String[] args) {
        int start = 10; // starting number
        int end = 30;   // ending number

        System.out.println("Prime numbers between " + start + " and " + end + " are:");

        for (int i = start; i <= end; i++) {
            if (isPrime(i)) {
                System.out.print(i + " ");
            }
        }
    }

    // Function to check if a number is prime
    public static boolean isPrime(int number) {
        if (number <= 1) return false;

        for (int i = 2; i <= number / 2; i++) {
            if (number % i == 0)
                return false;
        }

        return true;
    }
}





